-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import category_theory.products
import category_theory.types

namespace category_theory

universes vโ vโ uโ uโ -- declare the `v`'s first; see `category_theory.category` for an explanation

def op (C : Type uโ) : Type uโ := C

-- Use a high right binding power (like that of postfix โปยน) so that, for example,
-- `presheaf Cแตแต` parses as `presheaf (Cแตแต)` and not `(presheaf C)แตแต`.
notation C `แตแต`:std.prec.max_plus := op C

variables {C : Type uโ} [๐ : category.{vโ} C]
include ๐

instance opposite : category.{vโ} Cแตแต :=
{ hom  := ฮป X Y : C, Y โถ X,
  comp := ฮป _ _ _ f g, g โซ f,
  id   := ฮป X, ๐ X }

def op_op : (Cแตแต)แตแต โฅค C :=
{ obj := ฮป X, X,
  map := ฮป X Y f, f }

-- TODO this is an equivalence

namespace functor

section

variables {D : Type uโ} [๐ : category.{vโ} D]
include ๐

variables {C D}

protected definition op (F : C โฅค D) : Cแตแต โฅค Dแตแต :=
{ obj       := ฮป X, F.obj X,
  map       := ฮป X Y f, F.map f,
  map_id'   := begin /- `obviously'` says: -/ intros, erw [map_id], refl, end,
  map_comp' := begin /- `obviously'` says: -/ intros, erw [map_comp], refl end }

@[simp] lemma op_obj (F : C โฅค D) (X : C) : (F.op).obj X = F.obj X := rfl
@[simp] lemma op_map (F : C โฅค D) {X Y : C} (f : X โถ Y) : (F.op).map f = F.map f := rfl

protected definition unop (F : Cแตแต โฅค Dแตแต) : C โฅค D :=
{ obj       := ฮป X, F.obj X,
  map       := ฮป X Y f, F.map f,
  map_id'   := F.map_id,
  map_comp' := by intros; apply F.map_comp }

@[simp] lemma unop_obj (F : Cแตแต โฅค Dแตแต) (X : C) : (F.unop).obj X = F.obj X := rfl
@[simp] lemma unop_map (F : Cแตแต โฅค Dแตแต) {X Y : C} (f : X โถ Y) : (F.unop).map f = F.map f := rfl

variables (C D)

definition op_hom : (C โฅค D)แตแต โฅค (Cแตแต โฅค Dแตแต) :=
{ obj := ฮป F, F.op,
  map := ฮป F G ฮฑ,
  { app := ฮป X, ฮฑ.app X,
    naturality' := ฮป X Y f, eq.symm (ฮฑ.naturality f) } }

@[simp] lemma op_hom.obj (F : (C โฅค D)แตแต) : (op_hom C D).obj F = F.op := rfl
@[simp] lemma op_hom.map_app {F G : (C โฅค D)แตแต} (ฮฑ : F โถ G) (X : C) :
  ((op_hom C D).map ฮฑ).app X = ฮฑ.app X := rfl

definition op_inv : (Cแตแต โฅค Dแตแต) โฅค (C โฅค D)แตแต :=
{ obj := ฮป F : Cแตแต โฅค Dแตแต, F.unop,
  map := ฮป F G ฮฑ,
  { app := ฮป X : C, ฮฑ.app X,
    naturality' := ฮป X Y f, eq.symm (ฮฑ.naturality f) } }

@[simp] lemma op_inv.obj (F : Cแตแต โฅค Dแตแต) : (op_inv C D).obj F = F.unop := rfl
@[simp] lemma op_inv.map_app {F G : Cแตแต โฅค Dแตแต} (ฮฑ : F โถ G) (X : C) :
  ((op_inv C D).map ฮฑ).app X = ฮฑ.app X := rfl

-- TODO show these form an equivalence

instance {F : C โฅค D} [full F] : full F.op :=
{ preimage := ฮป X Y f, F.preimage f }

instance {F : C โฅค D} [faithful F] : faithful F.op :=
{ injectivity' := ฮป X Y f g h, by simpa using injectivity F h }

@[simp] lemma preimage_id (F : C โฅค D) [fully_faithful F] (X : C) : F.preimage (๐ (F.obj X)) = ๐ X :=
injectivity F (by simp)

end

namespace category
variables {C} {D : Type uโ} [๐ : category.{vโ} D]
include ๐

@[simp] lemma op_id_app (F : (C โฅค D)แตแต) (X : C) : (๐ F : F โน F).app X = ๐ (F.obj X) := rfl
@[simp] lemma op_comp_app {F G H : (C โฅค D)แตแต} (ฮฑ : F โถ G) (ฮฒ : G โถ H) (X : C) :
  ((ฮฑ โซ ฮฒ) : H โน F).app X = (ฮฒ : H โน G).app X โซ (ฮฑ : G โน F).app X := rfl
end category

section

variable (C)

/-- `functor.hom` is the hom-pairing, sending (X,Y) to X โ Y, contravariant in X and covariant in Y. -/
definition hom : (Cแตแต ร C) โฅค (Type vโ) :=
{ obj       := ฮป p, @category.hom C _ p.1 p.2,
  map       := ฮป X Y f, ฮป h, f.1 โซ h โซ f.2,
  map_id'   := by intros; ext; dsimp [category_theory.opposite]; simp,
  map_comp' := by intros; ext; dsimp [category_theory.opposite]; simp }

@[simp] lemma hom_obj (X : Cแตแต ร C) : (functor.hom C).obj X = @category.hom C _ X.1 X.2 := rfl
@[simp] lemma hom_pairing_map {X Y : Cแตแต ร C} (f : X โถ Y) :
  (functor.hom C).map f = ฮป h, f.1 โซ h โซ f.2 := rfl

end

end functor

end category_theory

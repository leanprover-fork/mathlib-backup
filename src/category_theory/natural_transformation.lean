/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Tim Baumann, Stephen Morgan, Scott Morrison

Defines natural transformations between functors.

Introduces notations
  `F ‚üπ G` for the type of natural transformations between functors `F` and `G`,
  `œÑ.app X` for the components of natural transformations,
  `œÉ ‚äü œÑ` for vertical compositions, and
  `œÉ ‚ó´ œÑ` for horizontal compositions.
-/

import category_theory.functor

namespace category_theory

universes v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ -- declare the `v`'s first; see `category_theory.category` for an explanation

variables {C : Type u‚ÇÅ} [ùíû : category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [ùíü : category.{v‚ÇÇ} D]
include ùíû ùíü

/--
`nat_trans F G` represents a natural transformation between functors `F` and `G`.

The field `app` provides the components of the natural transformation.

Naturality is expressed by `Œ±.naturality_lemma`.
-/
structure nat_trans (F G : C ‚•§ D) : Type (max u‚ÇÅ v‚ÇÇ) :=
(app : Œ† X : C, (F.obj X) ‚ü∂ (G.obj X))
(naturality' : ‚àÄ {X Y : C} (f : X ‚ü∂ Y), (F.map f) ‚â´ (app Y) = (app X) ‚â´ (G.map f) . obviously)

infixr ` ‚üπ `:50  := nat_trans             -- type as \==> or ‚üπ

restate_axiom nat_trans.naturality'

namespace nat_trans

/-- `nat_trans.id F` is the identity natural transformation on a functor `F`. -/
protected def id (F : C ‚•§ D) : F ‚üπ F :=
{ app := Œª X, ùüô (F.obj X) }

@[simp] lemma id_app (F : C ‚•§ D) (X : C) : (nat_trans.id F).app X = ùüô (F.obj X) := rfl

open category
open category_theory.functor

section
variables {F G H I : C ‚•§ D}

-- We'll want to be able to prove that two natural transformations are equal if they are componentwise equal.
@[extensionality] lemma ext (Œ± Œ≤ : F ‚üπ G) (w : ‚àÄ X : C, Œ±.app X = Œ≤.app X) : Œ± = Œ≤ :=
begin
  induction Œ± with Œ±_components Œ±_naturality,
  induction Œ≤ with Œ≤_components Œ≤_naturality,
  have hc : Œ±_components = Œ≤_components := funext w,
  subst hc
end

lemma congr_app {Œ± Œ≤ : F ‚üπ G} (h : Œ± = Œ≤) (X : C) : Œ±.app X = Œ≤.app X := by rw h

/-- `vcomp Œ± Œ≤` is the vertical compositions of natural transformations. -/
def vcomp (Œ± : F ‚üπ G) (Œ≤ : G ‚üπ H) : F ‚üπ H :=
{ app         := Œª X, (Œ±.app X) ‚â´ (Œ≤.app X),
  naturality' := begin /- `obviously'` says: -/ intros, simp, rw [‚Üêassoc, naturality, assoc, ‚Üênaturality], end }

infixr ` ‚äü `:80 := vcomp

@[simp] lemma vcomp_app (Œ± : F ‚üπ G) (Œ≤ : G ‚üπ H) (X : C) : (Œ± ‚äü Œ≤).app X = (Œ±.app X) ‚â´ (Œ≤.app X) := rfl
@[simp] lemma vcomp_assoc (Œ± : F ‚üπ G) (Œ≤ : G ‚üπ H) (Œ≥ : H ‚üπ I) : (Œ± ‚äü Œ≤) ‚äü Œ≥ = Œ± ‚äü (Œ≤ ‚äü Œ≥) := by tidy
end

variables {E : Type u‚ÇÉ} [‚Ñ∞ : category.{v‚ÇÉ} E]
include ‚Ñ∞

/-- `hcomp Œ± Œ≤` is the horizontal composition of natural transformations. -/
def hcomp {F G : C ‚•§ D} {H I : D ‚•§ E} (Œ± : F ‚üπ G) (Œ≤ : H ‚üπ I) : (F ‚ãô H) ‚üπ (G ‚ãô I) :=
{ app         := Œª X : C, (Œ≤.app (F.obj X)) ‚â´ (I.map (Œ±.app X)),
  naturality' := begin
                   /- `obviously'` says: -/
                   intros,
                   dsimp,
                   simp,
                   -- Actually, obviously doesn't use exactly this sequence of rewrites, but achieves the same result
                   rw [‚Üê assoc, naturality, assoc],
                   conv { to_rhs, rw [‚Üê map_comp, ‚Üê Œ±.naturality, map_comp] }
                 end }

infix ` ‚ó´ `:80 := hcomp

@[simp] lemma hcomp_app {F G : C ‚•§ D} {H I : D ‚•§ E} (Œ± : F ‚üπ G) (Œ≤ : H ‚üπ I) (X : C) :
  (Œ± ‚ó´ Œ≤).app X = (Œ≤.app (F.obj X)) ‚â´ (I.map (Œ±.app X)) := rfl

-- Note that we don't yet prove a `hcomp_assoc` lemma here: even stating it is painful, because we need to use associativity of functor composition

lemma exchange {F G H : C ‚•§ D} {I J K : D ‚•§ E} (Œ± : F ‚üπ G) (Œ≤ : G ‚üπ H) (Œ≥ : I ‚üπ J) (Œ¥ : J ‚üπ K) :
  ((Œ± ‚äü Œ≤) ‚ó´ (Œ≥ ‚äü Œ¥)) = ((Œ± ‚ó´ Œ≥) ‚äü (Œ≤ ‚ó´ Œ¥)) :=
begin
  -- `obviously'` says:
  ext,
  intros,
  dsimp,
  simp,
  -- again, this isn't actually what obviously says, but it achieves the same effect.
  conv { to_lhs, congr, skip, rw [‚Üêassoc, ‚Üênaturality, assoc] }
end

end nat_trans

end category_theory

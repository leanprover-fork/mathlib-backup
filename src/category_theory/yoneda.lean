-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison

/- The Yoneda embedding, as a functor `yoneda : C ‚•§ (C·µí·µñ ‚•§ Type v‚ÇÅ)`,
   along with an instance that it is `fully_faithful`.

   Also the Yoneda lemma, `yoneda_lemma : (yoneda_pairing C) ‚âÖ (yoneda_evaluation C)`. -/

import category_theory.natural_transformation
import category_theory.opposites
import category_theory.types
import category_theory.fully_faithful
import category_theory.natural_isomorphism

namespace category_theory

universes v‚ÇÅ u‚ÇÅ u‚ÇÇ -- declare the `v`'s first; see `category_theory.category` for an explanation

variables {C : Type u‚ÇÅ} [ùíû : category.{v‚ÇÅ} C]
include ùíû

def yoneda : C ‚•§ (C·µí·µñ ‚•§ Type v‚ÇÅ) :=
{ obj := Œª X,
  { obj := Œª Y : C, Y ‚ü∂ X,
    map := Œª Y Y' f g, f ‚â´ g,
    map_comp' := begin intros X_1 Y Z f g, ext1, dsimp at *, erw [category.assoc] end,
    map_id' := begin intros X_1, ext1, dsimp at *, erw [category.id_comp] end },
  map := Œª X X' f, { app := Œª Y g, g ‚â´ f } }

def coyoneda : C·µí·µñ ‚•§ (C ‚•§ Type v‚ÇÅ) :=
{ obj := Œª X : C,
  { obj := Œª Y, X ‚ü∂ Y,
    map := Œª Y Y' f g, g ‚â´ f,
    map_comp' := begin intros X_1 Y Z f g, ext1, dsimp at *, erw [category.assoc] end,
    map_id' := begin intros X_1, ext1, dsimp at *, erw [category.comp_id] end },
  map := Œª X X' f, { app := Œª Y g, f ‚â´ g },
  map_comp' := begin intros X Y Z f g, ext1, ext1, dsimp at *, erw [category.assoc] end,
  map_id' := begin intros X, ext1, ext1, dsimp at *, erw [category.id_comp] end }

namespace yoneda
@[simp] lemma obj_obj (X Y : C) : (yoneda.obj X).obj Y = (Y ‚ü∂ X) := rfl
@[simp] lemma obj_map (X : C) {Y Y' : C} (f : Y ‚ü∂ Y') : (yoneda.obj X).map f = Œª g, f ‚â´ g := rfl
@[simp] lemma map_app {X X' : C} (f : X ‚ü∂ X') (Y : C) : (yoneda.map f).app Y = Œª g, g ‚â´ f := rfl

lemma obj_map_id {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
  ((@yoneda C _).obj X).map f (ùüô X) = ((@yoneda C _).map f).app Y (ùüô Y) :=
by obviously

@[simp] lemma naturality {X Y : C} (Œ± : yoneda.obj X ‚ü∂ yoneda.obj Y)
  {Z Z' : C} (f : Z ‚ü∂ Z') (h : Z' ‚ü∂ X) : f ‚â´ Œ±.app Z' h = Œ±.app Z (f ‚â´ h) :=
begin erw [functor_to_types.naturality], refl end

instance yoneda_fully_faithful : fully_faithful (@yoneda C _) :=
{ preimage := Œª X Y f, (f.app X) (ùüô X),
  injectivity' := Œª X Y f g p,
  begin
    injection p with h,
    convert (congr_fun (congr_fun h X) (ùüô X)) ; simp
  end }

/-- Extensionality via Yoneda. The typical usage would be
```
-- Goal is `X ‚âÖ Y`
apply yoneda.ext,
-- Goals are now functions `(Z ‚ü∂ X) ‚Üí (Z ‚ü∂ Y)`, `(Z ‚ü∂ Y) ‚Üí (Z ‚ü∂ X)`, and the fact that these
functions are inverses and natural in `Z`.
```
-/
def ext (X Y : C)
  (p : Œ† {Z : C}, (Z ‚ü∂ X) ‚Üí (Z ‚ü∂ Y)) (q : Œ† {Z : C}, (Z ‚ü∂ Y) ‚Üí (Z ‚ü∂ X))
  (h‚ÇÅ : Œ† {Z : C} (f : Z ‚ü∂ X), q (p f) = f) (h‚ÇÇ : Œ† {Z : C} (f : Z ‚ü∂ Y), p (q f) = f)
  (n : Œ† {Z Z' : C} (f : Z' ‚ü∂ Z) (g : Z ‚ü∂ X), p (f ‚â´ g) = f ‚â´ p g) : X ‚âÖ Y :=
@preimage_iso _ _ _ _ yoneda _ _ _ _
  (nat_iso.of_components (Œª Z, { hom := p, inv := q, }) (by tidy))

-- We need to help typeclass inference with some awkward universe levels here.
instance prod_category_instance_1 : category ((C·µí·µñ ‚•§ Type v‚ÇÅ) √ó C·µí·µñ) :=
category_theory.prod.{(max u‚ÇÅ v‚ÇÅ)  v‚ÇÅ} (C·µí·µñ ‚•§ Type v‚ÇÅ) C·µí·µñ

instance prod_category_instance_2 : category (C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) :=
category_theory.prod.{v‚ÇÅ (max u‚ÇÅ v‚ÇÅ)} C·µí·µñ (C·µí·µñ ‚•§ Type v‚ÇÅ)

end yoneda

namespace coyoneda
@[simp] lemma obj_obj (X Y : C) : (coyoneda.obj X).obj Y = (X ‚ü∂ Y) := rfl
@[simp] lemma obj_map {X' X : C} (f : X' ‚ü∂ X) (Y : C) : (coyoneda.obj Y).map f = Œª g, g ‚â´ f := rfl
@[simp] lemma map_app (X : C) {Y Y' : C} (f : Y ‚ü∂ Y') : (coyoneda.map f).app X = Œª g, f ‚â´ g := rfl
end coyoneda

class representable (F : C·µí·µñ ‚•§ Type v‚ÇÅ) :=
(X : C)
(w : yoneda.obj X ‚âÖ F)

variables (C)
open yoneda

def yoneda_evaluation : (C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) ‚•§ Type (max u‚ÇÅ v‚ÇÅ) :=
(evaluation_uncurried C·µí·µñ (Type v‚ÇÅ)) ‚ãô ulift_functor.{u‚ÇÅ}

@[simp] lemma yoneda_evaluation_map_down
  (P Q : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) (Œ± : P ‚ü∂ Q) (x : (yoneda_evaluation C).obj P) :
  ((yoneda_evaluation C).map Œ± x).down = Œ±.2.app Q.1 (P.2.map Œ±.1 x.down) := rfl

def yoneda_pairing : (C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) ‚•§ Type (max u‚ÇÅ v‚ÇÅ) :=
(functor.prod yoneda.op (functor.id (C·µí·µñ ‚•§ Type v‚ÇÅ))) ‚ãô functor.hom (C·µí·µñ ‚•§ Type v‚ÇÅ)

@[simp] lemma yoneda_pairing_map
  (P Q : C·µí·µñ √ó (C·µí·µñ ‚•§ Type v‚ÇÅ)) (Œ± : P ‚ü∂ Q) (Œ≤ : (yoneda_pairing C).obj P) :
  (yoneda_pairing C).map Œ± Œ≤ = yoneda.map Œ±.1 ‚â´ Œ≤ ‚â´ Œ±.2 := rfl

def yoneda_lemma : yoneda_pairing C ‚âÖ yoneda_evaluation C :=
{ hom :=
  { app := Œª F x, ulift.up ((x.app F.1) (ùüô F.1)),
    naturality' :=
    begin
      intros X Y f, ext1, ext1,
      cases f, cases Y, cases X,
      dsimp at *, simp at *,
      erw [‚Üêfunctor_to_types.naturality,
           obj_map_id,
           functor_to_types.naturality,
           functor_to_types.map_id]
    end },
  inv :=
  { app := Œª F x,
    { app := Œª X a, (F.2.map a) x.down,
      naturality' :=
      begin
        intros X Y f, ext1,
        cases x, cases F,
        dsimp at *,
        erw [functor_to_types.map_comp]
      end },
    naturality' :=
    begin
      intros X Y f, ext1, ext1, ext1,
      cases x, cases f, cases Y, cases X,
      dsimp at *,
      erw [‚Üêfunctor_to_types.naturality, functor_to_types.map_comp]
    end },
  hom_inv_id' :=
  begin
    ext1, ext1, ext1, ext1, cases X, dsimp at *,
    erw [‚Üêfunctor_to_types.naturality,
         obj_map_id,
         functor_to_types.naturality,
         functor_to_types.map_id]
  end,
  inv_hom_id' :=
  begin
    ext1, ext1, ext1,
    cases x, cases X,
    dsimp at *,
    erw [functor_to_types.map_id]
  end }.

variables {C}

@[simp] def yoneda_sections (X : C) (F : C·µí·µñ ‚•§ Type v‚ÇÅ) : (yoneda.obj X ‚üπ F) ‚âÖ ulift.{u‚ÇÅ} (F.obj X) :=
nat_iso.app (yoneda_lemma C) (X, F)

omit ùíû
@[simp] def yoneda_sections_small {C : Type u‚ÇÅ} [small_category C] (X : C) (F : C·µí·µñ ‚•§ Type u‚ÇÅ) : (yoneda.obj X ‚üπ F) ‚âÖ F.obj X :=
yoneda_sections X F ‚â™‚â´ ulift_trivial _

end category_theory

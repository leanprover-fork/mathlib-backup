-- Copyright (c) 2018 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison

import category_theory.limits.limits
import category_theory.discrete_category

open category_theory

namespace category_theory.limits

universes u v w

variables {Œ≤ : Type v}
variables {C : Type u} [ùíû : category.{u v} C]
include ùíû

def fan (f : Œ≤ ‚Üí C) := cone (functor.of_function f)

@[simp] def fan.of_function
  {f : Œ≤ ‚Üí C} {P : C} (p : Œ† b, P ‚ü∂ f b) : fan f :=
{ X := P,
  œÄ := { app := p } }

def cone.of_fan {Œ≤ : Type v} {F : (discrete Œ≤) ‚•§ C} (t : fan (F.obj)) : cone F :=
{ X := t.X,
  œÄ := { app := t.œÄ.app } }

def fan.of_cone {Œ≤ : Type v} {F : (discrete Œ≤) ‚•§ C} (t : cone F) : fan (F.obj) :=
{ X := t.X,
  œÄ := { app := t.œÄ.app } }

def cofan (f : Œ≤ ‚Üí C) := cocone (functor.of_function f)

@[simp] def cofan.of_function
  {f : Œ≤ ‚Üí C} {P : C} (p : Œ† b, f b ‚ü∂ P) : cofan f :=
{ X := P,
  Œπ := { app := p } }

def cocone.of_cofan {Œ≤ : Type v} {F : (discrete Œ≤) ‚•§ C} (t : cofan (F.obj)) : cocone F :=
{ X := t.X,
  Œπ := { app := t.Œπ.app } }

def cofan.of_cocone {Œ≤ : Type v} {F : (discrete Œ≤) ‚•§ C} (t : cocone F) : cofan (F.obj) :=
{ X := t.X,
  Œπ := { app := t.Œπ.app } }

end category_theory.limits
